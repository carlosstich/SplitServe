"""create_users_table

Revision ID: ffdc0a98111c
Revises:
Create Date: 2020-11-20 15:06:02.230689

"""
from alembic import op
import sqlalchemy as sa

import os
environment = os.getenv("FLASK_ENV")
SCHEMA = os.environ.get("SCHEMA")


# revision identifiers, used by Alembic.
revision = 'ffdc0a98111c'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    users_table = op.create_table('users',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=40), nullable=False, unique=True),
        sa.Column('email', sa.String(length=255), nullable=False, unique=True),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )

    # Adjust the schema for the 'users' table if environment is production
    if environment == "production":
        op.execute(f"ALTER TABLE users SET SCHEMA {SCHEMA};")

    # Create Expenses Table
    expenses_table = op.create_table('expenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_by', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.func.current_timestamp(), nullable=False),
    sa.Column('total_amount', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Create UserExpenses Table
    user_expenses_table = op.create_table('user_expenses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('expense_id', sa.Integer(), nullable=False),
    sa.Column('paid_amount', sa.Integer(), nullable=True),
    sa.Column('is_settled', sa.Boolean(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.func.current_timestamp(), nullable=False),
    sa.Column('original_debt_amount', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )

    # Create Transactions Table
    transactions_table = op.create_table('transactions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('sender_id', sa.Integer(), nullable=False),
    sa.Column('receiver_id', sa.Integer(), nullable=False),
    sa.Column('approver_id', sa.Integer(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.func.current_timestamp(), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('status', sa.String(length=255), nullable=True),
    sa.Column('approved', sa.Boolean(), nullable=True),
    sa.Column('type', sa.String(length=255), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.Column('user_expense_id', sa.Integer())
    )

    # Add foreign key constraints
    op.create_foreign_key('fk_expenses_users', 'expenses', 'users', ['created_by'], ['id'])
    op.create_foreign_key('fk_user_expenses_users', 'user_expenses', 'users', ['user_id'], ['id'])
    op.create_foreign_key('fk_user_expenses_expenses', 'user_expenses', 'expenses', ['expense_id'], ['id'])
    op.create_foreign_key('fk_transactions_users_sender', 'transactions', 'users', ['sender_id'], ['id'])
    op.create_foreign_key('fk_transactions_users_receiver', 'transactions', 'users', ['receiver_id'], ['id'])
    op.create_foreign_key('fk_transactions_users_approver', 'transactions', 'users', ['approver_id'], ['id'])
    op.create_foreign_key('fk_transactions_user_expenses', 'transactions', 'user_expenses', ['user_expense_id'], ['id'])

    # If the environment is production, adjust the schema for each table
    if environment == "production":
        op.execute(f"ALTER TABLE expenses SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE user_expenses SET SCHEMA {SCHEMA};")
        op.execute(f"ALTER TABLE transactions SET SCHEMA {SCHEMA};")
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop tables in reverse order to creation due to foreign key constraints
    op.drop_table('transactions')
    op.drop_table('user_expenses')
    op.drop_table('expenses')
    op.drop_table('users')
    # ### end Alembic commands ###
